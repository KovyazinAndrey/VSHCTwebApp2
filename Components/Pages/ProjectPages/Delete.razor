@page "/projects/delete"
@using Microsoft.EntityFrameworkCore
@using VSHCTwebApp.Components.Models
@inject IDbContextFactory<VSHCTwebApp.Data.VSHCTwebAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Вы уверены что хотите удалить?</h1>

<div>
    <hr />
    @if (project is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Название</dt>
            <dd class="col-sm-10">@project.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Описание</dt>
            <dd class="col-sm-10">@project.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Кем создано</dt>
            <dd class="col-sm-10">@project.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Кем одобрено</dt>
            <dd class="col-sm-10">@project.ConfermedBy</dd>
        </dl>
        <EditForm method="post" Model="project" OnValidSubmit="DeleteProject" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(project is null)">Удалить</button> |
            <a href="/projects">Вернуть</a>
        </EditForm>
    }
</div>

@code {
    private Project? project;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        project = await context.Project.FirstOrDefaultAsync(m => m.Id == Id);

        if (project is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteProject()
    {
        using var context = DbFactory.CreateDbContext();
        context.Project.Remove(project!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/projects");
    }
}
