@page "/projects/create"
@using Microsoft.EntityFrameworkCore
@using VSHCTwebApp.Components.Models
@inject IDbContextFactory<VSHCTwebApp.Data.VSHCTwebAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Project</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Project" OnValidSubmit="AddProject" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label> 
                <InputText id="title" @bind-Value="Project.Title" class="form-control" /> 
                <ValidationMessage For="() => Project.Title" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Project.Description" class="form-control" /> 
                <ValidationMessage For="() => Project.Description" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="Project.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => Project.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="confermedby" class="form-label">ConfermedBy:</label> 
                <InputText id="confermedby" @bind-Value="Project.ConfermedBy" class="form-control" /> 
                <ValidationMessage For="() => Project.ConfermedBy" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/projects">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Project Project { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddProject()
    {
        using var context = DbFactory.CreateDbContext();
        context.Project.Add(Project);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/projects");
    }
}
