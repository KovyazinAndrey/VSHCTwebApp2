@page "/notes/details"
@using Microsoft.EntityFrameworkCore
@using VSHCTwebApp.Components.Models
@using Microsoft.AspNetCore.Identity;
@using VSHCTwebApp.Data;
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IDbContextFactory<VSHCTwebApp.Data.VSHCTwebAppContext> DbFactory
@inject NavigationManager NavigationManager



<h1>Подробнее</h1>

<div>
    <hr />
    @if (note is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Название</dt>
            <dd class="col-sm-10">@note.Title</dd>
            <dt class="col-sm-2">Описание</dt>
            <dd class="col-sm-10">@note.Description</dd>
            <dt class="col-sm-2">Кем создано</dt>
            <dd class="col-sm-10">@note.CreatedBy</dd>
            <dt class="col-sm-2">Когда создано</dt>
            <dd class="col-sm-10">@note.CreatedAt</dd>
        </dl>
        <div>
            @{
                var currentUser = HttpContextAccessor.HttpContext.User;
                var currentUserName = UserManager.GetUserName(currentUser);
            }

            @if (currentUserName == note.CreatedBy)
            {
                <a href="@($"/notes/edit?id={note.Id}")">Изменить</a>
            }

            <EditForm method="post" Model="note" OnValidSubmit="DeleteNote" FormName="delete" Enhance>
                <AuthorizeView Policy="AdminOnly">
                    <Authorized Context="authContext">
                        <button type="submit" class="btn btn-danger" disabled="@(note is null)">Удалить</button>
                    </Authorized>
                    <NotAuthorized Context="authContext">

                    </NotAuthorized>
                </AuthorizeView>
            </EditForm>
            <EditForm method="post" Model="note" OnValidSubmit="ApproveNote" FormName="approve" Enhance>
                <AuthorizeView Policy="AdminOnly">
                    <Authorized Context="authContext">
                        <button type="submit" class="btn btn-danger" disabled="@(note is null)">Подвердить</button>
                    </Authorized>
                    <NotAuthorized Context="authContext">

                    </NotAuthorized>
                </AuthorizeView>
            </EditForm>
            <a href="@($"/notes")">Вернуться</a>
        </div>
    }
</div>
﻿
@code {
    private Note? note { get; set; } = new();

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        note = await context.Note.FirstOrDefaultAsync(m => m.Id == Id);

        if (note is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteNote()
    {
        using var context = DbFactory.CreateDbContext();
        context.Note.Remove(note!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/notes");
    }
    private async Task ApproveNote()
    {
        if (note == null) return;
        using var context = DbFactory.CreateDbContext();
        var noteToApprove = await context.Note.FindAsync(note.Id);
        if (noteToApprove != null)
        {
            var approvedProject = new Project
                {
                    Title = noteToApprove.Title,
                    Description = noteToApprove.Description,
                    CreatedBy = noteToApprove.CreatedBy,
                    ConfermedBy = noteToApprove.CreatedBy
                };

            context.Project.Add(approvedProject);
            context.Note.Remove(noteToApprove);

            await context.SaveChangesAsync();

            NavigationManager.NavigateTo("/projects");
        }
    }
}
