@page "/notes"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Security.Claims
@using VSHCTwebApp.Components.Models
@using VSHCTwebApp.Data
@implements IAsyncDisposable
@inject IDbContextFactory<VSHCTwebApp.Data.VSHCTwebAppContext> DbFactory
@inject VSHCTwebApp.Components.Services.LikeService LikeService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>

<h1>
    Список идей:
    <a href="notes/create" class="btn-idea btn-primary" style="float: right;">Добавить идею</a>
</h1>

<QuickGrid Class="table" Items="context.Note.Include(n => n.Likes)">
    <TemplateColumn Title="Лайки" Context="note">
        <button @onclick="@(() => ToggleLike(note))"
                class="btn btn-link @(IsLikedByUser(note) ? "text-danger" : "text-secondary")">
            @(note.Likes?.Count ?? 0)
        </button>
    </TemplateColumn>

    <TemplateColumn Title="Название" Context="note">
        <a href="@($"notes/details?id={note.Id}")" class="text-decoration-none">@note.Title</a>
    </TemplateColumn>

    <TemplateColumn Title="Кем предложено" Context="note">
        <a class="text-decoration-none">@note.CreatedBy</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private VSHCTwebAppContext context = default!;
    private string? currentUserId;
    private bool? isLiked;


    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
        context.Note.Include(n => n.Likes).Load();
    }

    private bool IsLikedByUser(Note note)
    {
        return note.Likes?.Any(l => l.UserId == currentUserId) == true;
    }

    private async Task ToggleLike(Note note)
    {
        if (currentUserId == null)
        {
            NavigationManager.NavigateTo("Identity/Account/Login", true);
            return;
        }
        await LikeService.ToggleLikeAsync(note.Id, currentUserId);
        await UpdateLikeStatus(note);
    }

    private async Task UpdateLikeStatus(Note note)
    {
        // Используем новый контекст для свежих данных
        await using var freshContext = DbFactory.CreateDbContext();
        var freshNote = await freshContext.Note
            .Include(n => n.Likes)
            .FirstOrDefaultAsync(n => n.Id == note.Id);

        note.Likes = freshNote.Likes;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (context != null) await context.DisposeAsync();
    }
}
